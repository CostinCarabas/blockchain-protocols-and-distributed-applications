"use strict";(self.webpackChunkblockchain_protocols_and_distributed_applications=self.webpackChunkblockchain_protocols_and_distributed_applications||[]).push([[8533],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),h=o,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||i;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8712:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={},a="Peer to peer network",s={unversionedId:"Practical Sessions/Basic Peer-to-Peer Blockchain/p2p_network",id:"Practical Sessions/Basic Peer-to-Peer Blockchain/p2p_network",title:"Peer to peer network",description:"For this part we will use libp2p was used by the guys that build IPFS and Filecoin.",source:"@site/docs/Practical Sessions/Basic Peer-to-Peer Blockchain/p2p_network.md",sourceDirName:"Practical Sessions/Basic Peer-to-Peer Blockchain",slug:"/Practical Sessions/Basic Peer-to-Peer Blockchain/p2p_network",permalink:"/blockchain-protocols-and-distributed-applications/Practical Sessions/Basic Peer-to-Peer Blockchain/p2p_network",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"What is a discovery node?",permalink:"/blockchain-protocols-and-distributed-applications/Practical Sessions/Basic Peer-to-Peer Blockchain/discovery_node"},next:{title:"The terminal",permalink:"/blockchain-protocols-and-distributed-applications/Practical Sessions/Basic Peer-to-Peer Blockchain/terminal"}},l={},c=[{value:"Syncronise peers inside the network",id:"syncronise-peers-inside-the-network",level:2},{value:"So what are they doing?",id:"so-what-are-they-doing",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"peer-to-peer-network"},"Peer to peer network"),(0,o.kt)("p",null,"For this part we will use libp2p was used by the guys that build IPFS and Filecoin."),(0,o.kt)("p",null,"First we need to spawn a p2p node"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'func RunSourceNode() {\n // start a libp2p node that listens on a random local TCP port,\n // but without running the built-in ping protocol\n node := CreateNode("/ip4/127.0.0.1/tcp/0")\n\n // configure our own ping protocol\n pingService := &ping.PingService{Host: node}\n node.SetStreamHandler(ping.ID, pingService.PingHandler)\n\n // print the node\'s PeerInfo in multiaddr format\n peerInfo := peerstore.AddrInfo{\n  ID:    node.ID(),\n  Addrs: node.Addrs(),\n }\n addrs, err := peerstore.AddrInfoToP2pAddrs(&peerInfo)\n if err != nil {\n  panic(err)\n }\n fmt.Println("libp2p node address:", addrs[0])\n//we need paralel interaction for this \n go LogicNodeInteraction(node)\n\n for {\n//here will be our local terminal to interact with the blockchain\n  terminalview.TerminalView(node)\n }\n\n}\n\n')),(0,o.kt)("p",null,"Here we spawn a basic peer to peer Node now we need a way to interact with the node and some logic to be able to communicate with the other blockchains."),(0,o.kt)("h2",{id:"syncronise-peers-inside-the-network"},"Syncronise peers inside the network"),(0,o.kt)("p",null,"So we have LogicNodeInteraction which will run in parallel with the terminal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'func LogicNodeInteraction(node host.Host) {\n //Set stream handler for the "/hello/1.0.0" protocol\n go node.SetStreamHandler("/transaction/1.0.0", func(s network.Stream) {\n  log.Printf("/transaction/1.0.0 stream created")\n  err := ReadTransactionProtocol(s)\n  if err != nil {\n   s.Reset()\n  } else {\n   s.Close()\n  }\n })\n\n go node.SetStreamHandler("/mine/1.0.0", func(s network.Stream) {\n  log.Printf("/mine/1.0.0 stream created")\n  err := ReadMineProtocol(s)\n  if err != nil {\n   log.Printf("Error: %s", err)\n   s.Reset()\n  } else {\n   log.Printf("Closing stream")\n   s.Close()\n  }\n })\n\n go node.SetStreamHandler("/messages/1.0.0", func(s network.Stream) {\n  log.Printf("/messages/1.0.0 stream created")\n  err := ReadMessagesProtocol(s)\n  if err != nil {\n   log.Printf("Error: %s", err)\n   s.Reset()\n  } else {\n   log.Printf("Closing stream")\n   s.Close()\n  }\n })\n\n}\n\n')),(0,o.kt)("p",null,"Here we spawn 3 channels to listen for other peers(they need to send messages on one of this channels)"),(0,o.kt)("h2",{id:"so-what-are-they-doing"},"So what are they doing?"),(0,o.kt)("p",null,"This will be out channel of communication between our nodes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"/transaction/1.0.0" - is responsible for transaction, here is the way our transaction will be send\n\n\u201d/mine/1.0.0" \u2014 is responsible for the blocks that are mined, they will come from other nodes to this one ( here will come blocks that are valid and invalid form the other peers)\n\n\u201d/messages/1.0.0" \u2014 here will come diffrent messages about the network(transaction that are not valid\u2026etc) (we will not enter into this)```\n')))}u.isMDXComponent=!0}}]);